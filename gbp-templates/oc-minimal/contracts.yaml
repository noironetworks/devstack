#!highlight yaml

heat_template_version: 2014-10-16

parameters:

  monitoring_rule_set_name:
    type: string
    label: monitoring_rule_set_name
    description: Name of the Monitoring PRS
    default: 'Monitoring'

  monitoring_to_outside_rule_set_name:
    type: string
    label: monitoring_to_outside_rule_set_name
    description: Name of the Monitoring to Outside PRS
    default: 'Monitoring_to_outside'

  mysql_rule_set_name:
    type: string
    label: mysql_rule_set_name
    description: Name of the MySQL PRS
    default: 'MySQL'

  mysql_via_fw_ids_rule_set_name:
    type: string
    label: mysql_via_fw_ids_rule_set_name
    description: Name of the MySQL via FW IDS PRS
    default: 'MySQL_via_FW_IDS'

  app_rule_set_name:
    type: string
    label: app_rule_set_name
    description: Name of the App PRS
    default: 'App'

  http_rule_set_name:
    type: string
    label: http_rule_set_name
    description: Name of the allow HTTP traffic rule set
    default: "Allow_HTTP_Traffic"

  web_tier_provided_prs_name:
    type: string
    label: web_tier_provided_prs_name
    description: Name of the PRS provided by the Web Tier
    default: "Web_Tier_via_Loadbalancer"

  monitoring_ptg_name:
    type: string
    label: monitoring_ptg_name
    description: Name of the monitoring PTG
    default: 'Monitoring'

  service_management_ptg_name:
    type: string
    label: service_management_ptg_name
    description: Name of the service management PTG
    default: 'Service_Management_Tier'

resources:

#### Network Services' Setup ####

# Loadbalancer service chain node
    sc_lb_node:
        type: OS::Neutron::ServiceChainNode
        properties:
            name: "Loadbalancer"
            service_type: LOADBALANCER
            config: { get_file: lb_vip_description.template }
            shared: True

# Firewall service chain node
    sc_fw_node:
        type: OS::Neutron::ServiceChainNode
        properties:
            name: Transparent_Firewall_Node
            service_type: FIREWALL_TRANSPARENT
            config: { get_file: transparent_fw_appliance.yaml }
            shared: True

# IDS service chain node
    sc_ids_node:
        type: OS::Neutron::ServiceChainNode
        properties:
            name: Intrusion_Detection_Service
            service_type: IDS
            config: { get_file: transparent_ids_appliance.yaml }
            shared: True

# LB service chain spec
    sc_spec:
        type: OS::Neutron::ServiceChainSpec
        depends_on: [ sc_lb_node ]
        properties:
            name: "Loadbalancer-Service-Chain"
            nodes:
                - { get_resource: sc_lb_node }
            shared: True

# Transparent service chain spec: FW -> IDS
    fw_ids_sc_spec:
        type: OS::Neutron::ServiceChainSpec
        depends_on: [ sc_fw_node, sc_ids_node ]
        properties:
            name: FW_IDS_Chain_Spec
            nodes:
                - { get_resource: sc_fw_node }
                - { get_resource: sc_ids_node }
            shared: True

# Network service policy for VIP IP assignment
    vip_ip_policy:
        type: OS::Neutron::NetworkServicePolicy
        properties:
            name: "VIP-Allocation"
            network_service_params: 
                - type: ip_single
                  name: vip_ip
                  value: self_subnet
            shared: True

#### Policy Classifiers, Actions, Rules Setup ####

# Allow action
    allow_action:
        type: OS::Neutron::PolicyAction
        properties:
            name: "Allow"
            action_type: allow
            shared: True

# Classifier for icmp traffic
    icmp_classifier:
        type: OS::Neutron::PolicyClassifier
        properties:
            name: "ICMP-Traffic"
            protocol: icmp
            direction: bi
            shared: True

# Rule to allow all icmp traffic
    icmp_traffic_rule:
        type: OS::Neutron::PolicyRule
        depends_on: [ icmp_classifier, allow_action ]
        properties:
            name: "ICMP-BI"
            policy_classifier_id: { get_resource: icmp_classifier }
            policy_actions: [{ get_resource: allow_action }]
            shared: True

# Classifiers for monitoring traffic
    monitoring_classifier_in_5671:
        type: OS::Neutron::PolicyClassifier
        properties:
            name: "Monitoring-Traffic"
            protocol: tcp
            port_range: '5671'
            direction: in
            shared: True

    monitoring_classifier_out_22:
        type: OS::Neutron::PolicyClassifier
        properties:
            name: "Monitoring-Traffic"
            protocol: tcp
            port_range: '22'
            direction: out
            shared: True

# Rules for monitoring traffic
    monitoring_traffic_rule_in_5671:
        type: OS::Neutron::PolicyRule
        depends_on: [ monitoring_classifier_in_5671, allow_action ]
        properties:
            name: "Monitoring-IN"
            policy_classifier_id: { get_resource: monitoring_classifier_in_5671 }
            policy_actions: [{ get_resource: allow_action }]
            shared: True

    monitoring_traffic_rule_out_22:
        type: OS::Neutron::PolicyRule
        depends_on: [ monitoring_classifier_out_22, allow_action ]
        properties:
            name: "Monitoring-OUT"
            policy_classifier_id: { get_resource: monitoring_classifier_out_22 }
            policy_actions: [{ get_resource: allow_action }]
            shared: True

# Classifier for all tcp traffic
    tcp_classifier:
        type: OS::Neutron::PolicyClassifier
        properties:
            name: "TCP-Traffic"
            protocol: tcp
            direction: bi
            shared: True

# Rule to allow all tcp traffic
    tcp_traffic_rule:
        type: OS::Neutron::PolicyRule
        depends_on: [ tcp_classifier, allow_action ]
        properties:
            name: "TCP-BI"
            policy_classifier_id: { get_resource: tcp_classifier }
            policy_actions: [{ get_resource: allow_action }]
            shared: True

# MySQL DB traffic classifier
    db_tcp_classifier:
        type: OS::Neutron::PolicyClassifier
        properties:
            name: "MySQL-Traffic"
            protocol: tcp
            port_range: '3306'
            direction: in
            shared: True

# Allow DB traffic rule
    mysql_db_traffic_rule:
        type: OS::Neutron::PolicyRule
        depends_on: [ db_tcp_classifier, allow_action ]
        properties:
            name: "MySQL-IN"
            policy_classifier_id: { get_resource: db_tcp_classifier }
            policy_actions: [{ get_resource: allow_action }]
            shared: True

# Redirect to FW -> IDS spec action
    redirect_to_fw_ids_chain:
        type: OS::Neutron::PolicyAction
        depends_on: fw_ids_sc_spec
        properties:
            name: "Redirect-FW-IDS"
            action_type: redirect
            action_value: { get_resource: fw_ids_sc_spec }
            shared: True

# Redirect MySQL to transparent services rule
    fw_ids_redirect_traffic_rule:
        type: OS::Neutron::PolicyRule
        depends_on: [ db_tcp_classifier, redirect_to_lb_chain ]
        properties:
            name: "MySQL-IN-VIA-FW-IDS"
            policy_classifier_id: { get_resource: db_tcp_classifier }
            policy_actions: [{ get_resource: redirect_to_fw_ids_chain }]
            shared: True

# App traffic classifier
    app_tcp_classifier:
        type: OS::Neutron::PolicyClassifier
        properties:
            name: "Application-Traffic"
            protocol: tcp
            port_range: '8080'
            direction: in
            shared: True

# Allow App traffic classifier rule
    app_traffic_rule:
        type: OS::Neutron::PolicyRule
        depends_on: [ app_tcp_classifier, allow_action ]
        properties:
            name: "Application-IN"
            policy_classifier_id: { get_resource: app_tcp_classifier }
            policy_actions: [{ get_resource: allow_action }]
            shared: True

# HTTP traffic classifier
    http_tcp_classifier:
        type: OS::Neutron::PolicyClassifier
        properties:
            name: "External-Traffic"
            protocol: tcp
            port_range: '80'
            direction: in
            shared: True

# Allow HTTP traffic rule
    http_traffic_rule:
        type: OS::Neutron::PolicyRule
        depends_on: [ http_tcp_classifier, allow_action ]
        properties:
            name: "HTTP-IN"
            policy_classifier_id: { get_resource: http_tcp_classifier }
            policy_actions: [{ get_resource: allow_action }]
            shared: True

# Redirect to LB chain action
    redirect_to_lb_chain:
        type: OS::Neutron::PolicyAction
        depends_on: sc_spec
        properties:
            name: "Redirect-LB"
            action_type: redirect
            action_value: { get_resource: sc_spec }
            shared: True

# Redirect HTTP traffic to LB rule
    http_redirect_traffic_rule:
        type: OS::Neutron::PolicyRule
        depends_on: [ http_tcp_classifier, redirect_to_lb_chain ]
        properties:
            name: "HTTP-IN-VIA-LB"
            policy_classifier_id: { get_resource: http_tcp_classifier }
            policy_actions: [{ get_resource: redirect_to_lb_chain }]
            shared: True

#### Policy-Rules-Sets (Contracts) Setup ####

#  Web tier - allow inbound 80 from external (nginx)
    http_rule_set:
        type: OS::Neutron::PolicyRuleSet
        depends_on: [icmp_traffic_rule, http_traffic_rule]
        properties:
            name: { get_param: http_rule_set_name }
            policy_rules: [{ get_resource: icmp_traffic_rule }, { get_resource: http_traffic_rule }] 
            child_policy_rule_sets: []
            shared: True

#  Web tier - allow inbound 80 from external (nginx) via LB
    http_with_lb_redirect_rule_set:
        type: OS::Neutron::PolicyRuleSet
        depends_on: [icmp_traffic_rule, http_redirect_traffic_rule]
        properties:
            name: { get_param: web_tier_provided_prs_name }
            policy_rules: [{ get_resource: icmp_traffic_rule }, { get_resource: http_redirect_traffic_rule }] 
            child_policy_rule_sets: []
            shared: True

# App tier - allow inbound 8000 from web-tier (python server)
    app_rule_set:
        type: OS::Neutron::PolicyRuleSet
        depends_on: [icmp_traffic_rule, app_traffic_rule]
        properties:
            name: { get_param: app_rule_set_name }
            policy_rules: [{ get_resource: icmp_traffic_rule }, { get_resource: app_traffic_rule }] 
            child_policy_rule_sets: []
            shared: True

# DB tier - allow 3306 (mysql)
    mysql_rule_set:
        type: OS::Neutron::PolicyRuleSet
        depends_on: [icmp_traffic_rule, mysql_db_traffic_rule]
        properties:
            name: { get_param: mysql_rule_set_name }
            policy_rules: [{ get_resource: icmp_traffic_rule }, { get_resource: mysql_db_traffic_rule }] 
            child_policy_rule_sets: []
            shared: True

# DB tier - allow 3306 (mysql) via Transparent FW -> IDS
    mysql_via_fw_ids_rule_set:
        type: OS::Neutron::PolicyRuleSet
        depends_on: [icmp_traffic_rule, fw_ids_redirect_traffic_rule]
        properties:
            name: { get_param: mysql_via_fw_ids_rule_set_name }
            policy_rules: [{ get_resource: icmp_traffic_rule }, { get_resource: fw_ids_redirect_traffic_rule }] 
            child_policy_rule_sets: []
            shared: True

# Allow access to monitoring services
    monitoring_rule_set:
        type: OS::Neutron::PolicyRuleSet
        depends_on: [icmp_traffic_rule, monitoring_traffic_rule_in_5671, monitoring_traffic_rule_out_22]
        properties:
            name: { get_param: monitoring_rule_set_name }
            policy_rules: [{ get_resource: icmp_traffic_rule }, {get_resource: monitoring_traffic_rule_in_5671},
                           {get_resource: monitoring_traffic_rule_out_22}]
            child_policy_rule_sets: []
            shared: True

# Allow Monitoring tier to access outside world
    monitoring_to_outside_rule_set:
        type: OS::Neutron::PolicyRuleSet
        depends_on: [icmp_traffic_rule, tcp_traffic_rule]
        properties:
            name: { get_param: monitoring_to_outside_rule_set_name }
            policy_rules: [{ get_resource: icmp_traffic_rule }, { get_resource: tcp_traffic_rule }] 
            child_policy_rule_sets: []
            shared: True

# Allow outside world to access Service Management PTG
    service_management_access_rule_set:
        type: OS::Neutron::PolicyRuleSet
        depends_on: [icmp_traffic_rule, tcp_traffic_rule]
        properties:
            name: 'Service-Management-Access'
            policy_rules: [{ get_resource: icmp_traffic_rule }, { get_resource: tcp_traffic_rule }]
            child_policy_rule_sets: []
            shared: True

outputs:

    vip_ip_policy_id:
        value: { get_resource: vip_ip_policy }

    http_rule_set_id:
        value: { get_resource: http_rule_set }

    http_with_lb_redirect_rule_set_id:
        value: { get_resource: http_with_lb_redirect_rule_set }

    app_rule_set_id:
        value: { get_resource: app_rule_set }

    mysql_rule_set_id:
        value: { get_resource: mysql_rule_set }

    mysql_via_fw_ids_rule_set_id:
        value: { get_resource: mysql_via_fw_ids_rule_set }

    monitoring_rule_set_id:
        value: { get_resource: monitoring_rule_set }

    monitoring_to_outside_rule_set_id:
        value: { get_resource: monitoring_to_outside_rule_set }

    service_management_access_rule_set_id:
        value: { get_resource: service_management_access_rule_set }
