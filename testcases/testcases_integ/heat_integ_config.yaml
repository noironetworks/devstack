#!highlight yaml

heat_template_version: 2013-05-23

parameters:
    vm_image:
      type: string
      label: vm_image
      description: Image for all VMs
      default: ubuntu_multi_nics

    vm_flavor:
      type: string
      label: vm_flavor
      description: Flavor for all VMs
      default: m1.medium

    availability_zone:
      type: string
      label: availability_zone
      description: The Availability Zone to Launch Instance
      default: 'gbp_zone'

resources:

# Creating a classifier for all tcp traffic
    demo_class_tcp:
        type: OS::Neutron::PolicyClassifier
        properties:
            name: demo_class_tcp
            protocol: tcp
            direction: in
            shared: False

# Creating a classifier for all udp traffic
    demo_class_udp:
        type: OS::Neutron::PolicyClassifier
        properties:
            name: demo_class_udp
            protocol: udp
            direction: in
            shared: False

# Creating a classifier for ICMP traffic
    demo_class_icmp:
        type: OS::Neutron::PolicyClassifier
        properties:
            name: demo_class_icmp
            protocol: icmp
            direction: bi
            shared: False

# Creating allow action
    demo_act:
        type: OS::Neutron::PolicyAction
        properties:
            name: demo_act
            action_type: allow
            shared: False

# Creating a policy rule and policy rule-set
    demo_rule_tcp:
        type: OS::Neutron::PolicyRule
        properties:
            name: demo_rule_tcp
            policy_classifier_id: { get_resource: demo_class_tcp }
            policy_actions: [{ get_resource: demo_act }]
            shared: False

    demo_ruleset_tcp:
        type: OS::Neutron::PolicyRuleSet
        properties:
            name: demo_ruleset_tcp
            policy_rules: [{ get_resource: demo_rule_tcp }]
            child_policy_rule_sets: []
            shared: False

    demo_rule_udp:
        type: OS::Neutron::PolicyRule
        properties:
            name: demo_rule_udp
            policy_classifier_id: { get_resource: demo_class_udp }
            policy_actions: [{ get_resource: demo_act }]
            shared: False

    demo_ruleset_udp:
        type: OS::Neutron::PolicyRuleSet
        properties:
            name: demo_ruleset_udp
            policy_rules: [{ get_resource: demo_rule_udp }]
            child_policy_rule_sets: []
            shared: False

    demo_rule_icmp:
        type: OS::Neutron::PolicyRule
        properties:
            name: demo_rule_icmp
            policy_classifier_id: { get_resource: demo_class_icmp }
            policy_actions: [{ get_resource: demo_act }]
            shared: False

    demo_ruleset_icmp:
        type: OS::Neutron::PolicyRuleSet
        properties:
            name: demo_ruleset_icmp
            policy_rules: [{ get_resource: demo_rule_icmp }]
            child_policy_rule_sets: []
            shared: False

    demo_ruleset_icmp_tcp:
        type: OS::Neutron::PolicyRuleSet
        properties:
            name: demo_ruleset_icmp_tcp
            policy_rules: [{ get_resource: demo_rule_icmp }, { get_resource: demo_rule_tcp }]
            child_policy_rule_sets: []
            shared: False

    demo_ruleset_icmp_udp:
        type: OS::Neutron::PolicyRuleSet
        properties:
            name: demo_ruleset_icmp_udp
            policy_rules: [{ get_resource: demo_rule_icmp },{ get_resource: demo_rule_udp }]
            child_policy_rule_sets: []
            shared: False

    demo_ruleset_tcp_udp:
        type: OS::Neutron::PolicyRuleSet
        properties:
            name: demo_ruleset_tcp_udp
            policy_rules: [{ get_resource: demo_rule_tcp }, { get_resource: demo_rule_udp }]
            child_policy_rule_sets: []
            shared: False

    demo_ruleset_all:
        type: OS::Neutron::PolicyRuleSet
        properties:
            name: demo_ruleset_all
            policy_rules: [{ get_resource: demo_rule_icmp }, { get_resource: demo_rule_tcp }, { get_resource: demo_rule_udp }]
            child_policy_rule_sets: []
            shared: False

# Creating L2 and L3Policy for rendering DHCP
    demo_l3_policy:
        type: OS::Neutron::L3Policy
        properties:
            name: demo_subnet
            ip_pool: "17.17.17.0/24"
            subnet_prefix_length: 28
            shared: False

    demo_l2_policy:
        type: OS::Neutron::L2Policy
        depends_on: demo_l3_policy
        properties:
            name: demo_bd
            l3_policy_id: { get_resource: demo_l3_policy }
            shared: False


# Create EPGs for DHCP rendering by Admin
    server_ptg_1:
        type: OS::Neutron::PolicyTargetGroup
        properties:
            name: server_ptg_1
            l2_policy_id: {get_resource: demo_l2_policy}
            provided_policy_rule_sets:
                - policy_rule_set_id: { get_resource: demo_ruleset_all }
                  policy_rule_set_scope:
            shared: False
            
    client_ptg_1:
        type: OS::Neutron::PolicyTargetGroup
        properties:
            name: client_ptg_1
            l2_policy_id: {get_resource: demo_l2_policy}
            consumed_policy_rule_sets:
                - policy_rule_set_id: { get_resource: demo_ruleset_all }
                  policy_rule_set_scope:
            shared: False    

    vm4_data_pt:
        type: OS::Neutron::PolicyTarget
        depends_on: server_ptg_1
        properties:
            name: vm4_data_pt
            description: 'VM4 Data PT'
            policy_target_group_id: { get_resource: server_ptg_1 }

    vm5_data_pt:
        type: OS::Neutron::PolicyTarget
        depends_on: client_ptg_1
        properties:
            name: vm5_data_pt
            description: 'VM5 Data PT'
            policy_target_group_id: { get_resource: client_ptg_1 }

    vm6_data_pt:
        type: OS::Neutron::PolicyTarget
        depends_on: client_ptg_1
        properties:
            name: vm6_data_pt
            description: 'VM6 Data PT'
            policy_target_group_id: { get_resource: client_ptg_1 }

# Instantiating VM for DIff_PTG_Same_L2P_Same_L3P
    vm4:
        type: OS::Nova::Server
        depends_on: vm4_data_pt
        properties:
            name: "VM4"
            availability_zone: { get_param: availability_zone }
            image: { get_param: vm_image }
            flavor: {get_param: vm_flavor}
            networks:
                - port: {get_attr: [vm4_data_pt, port_id]}
            user_data_format: RAW

    vm5:
        type: OS::Nova::Server
        depends_on: vm5_data_pt
        properties:
            name: "VM5"
            availability_zone: { get_param: availability_zone }
            image: { get_param: vm_image }
            flavor: {get_param: vm_flavor}
            networks:
                - port: {get_attr: [vm5_data_pt, port_id]}
            user_data_format: RAW

    vm6:
        type: OS::Nova::Server
        depends_on: vm6_data_pt
        properties:
            name: "VM6"
            image: { get_param: vm_image }
            flavor: {get_param: vm_flavor}
            networks:
                - port: {get_attr: [vm6_data_pt, port_id]}
            user_data_format: RAW

outputs:

    server_ptg_id:
        value: { get_resource: server_ptg_1 }

    client_ptg_id:
        value: { get_resource: client_ptg_1 } 

    demo_l3_policy_id:
        value: { get_resource: demo_l3_policy }
  
    demo_l2_policy_id:
        value: { get_resource: demo_l2_policy }

    demo_ruleset_tcp_id:
        value: { get_resource: demo_ruleset_tcp }

    demo_rule_tcp_id:
        value: { get_resource: demo_rule_tcp }

    demo_ruleset_udp_id:
        value: { get_resource: demo_ruleset_udp }

    demo_rule_udp_id:
        value: { get_resource: demo_rule_udp }

    demo_ruleset_icmp_id:
        value: { get_resource: demo_ruleset_icmp }

    demo_rule_icmp_id:
        value: { get_resource: demo_rule_icmp }
